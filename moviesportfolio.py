# -*- coding: utf-8 -*-
"""MoviesPortfolio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gnyi_UuhDlC__faHXKFuHuCMmGU9Vm37

## Python Co-Relation Project on Movies
"""

# Commented out IPython magic to ensure Python compatibility.
#import Libraries

import pandas as pd
import seaborn as sns
import numpy as np

import matplotlib
import matplotlib.pyplot as plt
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8)

#read data
df = pd.read_csv('movies.csv')
df

"""# Data Cleaning"""

#looking for missing data

for col in df.columns:
  pct_missing = np.mean(df[col].isnull())
  print('{} - {}%'.format(col, pct_missing))

# Data Types of Column
df.dtypes

#change data types of column
df['budget'] = df['budget'].fillna(0)
df['budget'] = df['budget'].astype('int64')
df['gross'] = df['gross'].fillna(0)
df['gross'] = df['gross'].astype('int64')
df.head()

df.sort_values(by = ['gross'], inplace = False, ascending = False)

df

"""# Data Processing

Budget vs Gross
"""

#scatter plot with budget vs gross

plt.scatter(x=df['budget'], y=df['gross'])
plt.title('Budget vs Gross Earning')

plt.xlabel('Gross Earning')
plt.ylabel('Budget for Film')
plt.show()

#plot the budget vs gross using seaborn(regression)

sns.regplot(x='budget', y='gross', data=df, scatter_kws={'color':'red'}, line_kws={'color':'blue'})

#looking at the corelation

df.corr() #Pearson

#High corelation between budget and Gross

corelation_matrix = df.corr()

sns.heatmap(corelation_matrix, annot=True)
plt.title('Corelation Metric for Numeric Features')

plt.xlabel('Movie Metric')
plt.ylabel('Movie Metric')
plt.show()

df_numerized = df.copy()

for col_name in df_numerized.columns:
  if(df_numerized[col_name].dtype == 'object'):
    df_numerized[col_name] = df_numerized[col_name].astype('category')
    df_numerized[col_name] = df_numerized[col_name].cat.codes

df_numerized

df

corelation_matrix = df_numerized.corr()

sns.heatmap(corelation_matrix, annot=True)
plt.title('Corelation Metric for Numeric Features')

plt.xlabel('Movie Metric')
plt.ylabel('Movie Metric')
plt.show()

df_numerized.corr()

corelation_mat = df_numerized.corr()

corr_pairs = corelation_mat.unstack()

sorted_pair = corr_pairs.sort_values()
sorted_pair

high_cor = sorted_pair[(sorted_pair) > 0.5]
high_cor

"""Votes and Gross have the high corelation too """

